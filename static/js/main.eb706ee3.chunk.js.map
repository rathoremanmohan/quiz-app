{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","playerScore","questions","question","possibleAnswers","rightAnswer","playerChoice","answerQuestion","bind","index","choice","answeredQuestion","this","allQuestions","setState","updatePlayerScore","filter","q","length","console","log","className","map","displayQuestion","answer","answerIndex","onClick","displayResult","renderQuestions","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPA0HmBA,G,wDArHX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAa,EACbC,UAAW,CACP,CACCC,SAAU,qBACVC,gBAAiB,CAAC,MAAO,OACzBC,YAAa,MACbC,aAAc,MAEf,CACIH,SAAU,kDACVC,gBAAiB,CAAC,MAAO,OACzBC,YAAa,MACbC,aAAc,MAElB,CACIH,SAAU,iDACVC,gBAAiB,CAAC,MAAO,OACzBC,YAAa,MACbC,aAAc,MAElB,CACIH,SAAU,+CACVC,gBAAiB,CAAC,MAAO,OACzBC,YAAa,MACbC,aAAc,QAK1B,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBAhCP,E,2DAqCPC,EAAOC,GAAS,IAAD,OACjBC,EAAmBC,KAAKZ,MAAME,UAAUO,GAC9CE,EAAiBL,aAAeI,EAChC,IAAMG,EAAeD,KAAKZ,MAAME,UAChCW,EAAaJ,GAASE,EACtBC,KAAKE,SAAS,CACVZ,UAAWW,IACZ,WACC,EAAKE,yB,0CAKT,IAAMd,EAAcW,KAAKZ,MAAME,UAAUc,QAAO,SAAAC,GAAC,OAAIA,EAAEZ,cAEnDY,EAAEX,gBAAcY,OACpBN,KAAKE,SAAS,CAACb,gBACfkB,QAAQC,IAAI,oBAAqBnB,K,oCAG1BQ,GACP,IAAMN,EAAWS,KAAKZ,MAAME,UAAUO,GACtC,GAAKN,EAASG,aACd,OAAIH,EAASG,eAAiBH,EAASE,YAEjC,mBAAGgB,UAAU,iBAAb,qCAMA,mBAAGA,UAAU,mBAAb,yC,wCAOO,IAAD,OACZ,OAAOT,KAAKZ,MAAME,UAAUoB,KAAI,SAACnB,EAAUM,GAAX,OAC5B,EAAKc,gBAAgBd,Q,sCAIbA,GAAQ,IAAD,OACnB,KAAIG,KAAKZ,MAAMM,aAAeG,GAA9B,CACA,IAAMN,EAAWS,KAAKZ,MAAME,UAAUO,GACtC,OACI,sBAAKY,UAAU,mBAAf,UACI,mBAAGA,UAAU,WAAb,SACKlB,EAASA,WAEd,uBACEA,EAASC,gBAAgBkB,KAAI,SAACE,EAAQC,GAAT,OAC3B,wBAA4CJ,UAAU,kBAC9CK,QAAS,kBAAM,EAAKnB,eAAeE,EAAOe,IADlD,SAEKA,GAFL,YAAkBf,EAAlB,cAA6BgB,OAKjC,uBACCb,KAAKe,cAAclB,KAZxB,YAA4CA,O,+BAkBpD,OACI,sBAAKY,UAAU,MAAf,UACE,4CACA,uBACIT,KAAKgB,yB,GA5GDC,cCQPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eb706ee3.chunk.js","sourcesContent":["    import React, { Component } from 'react';\n    import './App.css';\n\n\n    class App extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                playerScore: 0,\n                questions: [\n                    {\n                     question: \"What animal barks?\",\n                     possibleAnswers: [\"Dog\", \"Cat\"],\n                     rightAnswer: \"Dog\",\n                     playerChoice: null\n                    },\n                    {\n                        question: \"What animal is more closely related to a tiger?\",\n                        possibleAnswers: [\"Dog\", \"Cat\"],\n                        rightAnswer: \"Cat\",\n                        playerChoice: null\n                    },\n                    {\n                        question: \"What animal is more closely related to a wolf?\",\n                        possibleAnswers: [\"Dog\", \"Cat\"],\n                        rightAnswer: \"Dog\",\n                        playerChoice: null\n                    },\n                    {\n                        question: \"What animal is best known for playing fetch?\",\n                        possibleAnswers: [\"Dog\", \"Cat\"],\n                        rightAnswer: \"Dog\",\n                        playerChoice: null\n                    }\n                ]\n            }\n\n            this.answerQuestion = this.answerQuestion.bind(this);\n\n        }\n\n\n     answerQuestion(index, choice) {\n            const answeredQuestion = this.state.questions[index];\n            answeredQuestion.playerChoice = choice;\n            const allQuestions = this.state.questions;\n            allQuestions[index] = answeredQuestion;\n            this.setState({\n                questions: allQuestions\n            }, () => {\n                this.updatePlayerScore();\n            });\n     }\n\n     updatePlayerScore () {\n            const playerScore = this.state.questions.filter(q => q.rightAnswer\n            ===\n                q.playerChoice).length;\n            this.setState({playerScore});\n            console.log('New player score:', playerScore);\n     }\n\n     displayResult(index) {\n            const question = this.state.questions[index];\n            if (!question.playerChoice) { return; }\n            if (question.playerChoice === question.rightAnswer) {\n                return (\n                  <p className=\"result-correct\">\n                      Your answer is correct!\n                  </p>\n                );\n            } else {\n                return (\n                  <p className=\"result-incorrect\">\n                      Your answer is incorrect!\n                  </p>\n                );\n            }\n     }\n\n     renderQuestions () {\n            return this.state.questions.map((question, index) =>\n                this.displayQuestion(index)\n            );\n     }\n\n        displayQuestion(index) {\n            if (this.state.playerChoice < index) { return; }\n            const question = this.state.questions[index];\n            return (\n                <div className=\"question-display\" key={`q-${index}`}>\n                    <p className=\"question\">\n                        {question.question}\n                    </p>\n                    <br/>\n                    { question.possibleAnswers.map((answer, answerIndex) => (\n                        <button key={`q-${index}-a-${answerIndex}`} className=\"question-choice\"\n                                onClick={() => this.answerQuestion(index, answer)}>\n                            {answer}\n                        </button>\n                    ))}\n                    <br/>\n                    {this.displayResult(index)}\n                </div>\n            );\n        }\n\n      render() {\n        return (\n            <div className=\"App\">\n              <h1>Quiz Show!</h1>\n              <hr/>\n                { this.renderQuestions() }\n            </div>\n        );\n      }\n    }\n\n\n\n\n\n    export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}